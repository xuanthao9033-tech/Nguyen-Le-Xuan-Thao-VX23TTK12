@using IphoneStoreBE.VModels
@model List<CartGetVModel>
<meta charset="utf-8" />


@{
    ViewData["Title"] = "Giỏ hàng";
    var backendBase = ViewBag.BackendBaseUrl as string ?? "https://localhost:7182";
    var backendDefaultImage = $"{backendBase.TrimEnd('/')}/images/default-product.jpg";
    var totalAmount = Model?.Sum(item => (item.Price ?? 0) * item.Quantity) ?? 0;
}

<div class="container mt-5">
    <h3 class="text-center mb-4">🛒 Giỏ hàng của bạn</h3>

    @if (Model == null || !Model.Any())
    {
        <div class="text-center">
            <p class="text-muted">@(ViewBag.Error ?? "Giỏ hàng trống")</p>
            <a href="/" class="btn btn-primary mt-3">
                <i class="bi bi-arrow-left"></i> Tiếp tục mua sắm
            </a>
        </div>
    }
    else
    {
        <div class="row">
            <!-- Danh sách sản phẩm -->
            <div class="col-md-8">
                @foreach (var item in Model)
                {
                    <div class="card mb-3 border-0 shadow-sm">
                        <div class="row g-0">
                            <div class="col-md-3">
                                @{
                                    // Normalize ImageUrl: backend returns either full URL or path like /images/products/xxx.png
                                    var imageUrl = item.ImageUrl ?? "/images/default-product.jpg";
                                    if (!imageUrl.StartsWith("http", StringComparison.OrdinalIgnoreCase))
                                    {
                                        imageUrl = backendBase.TrimEnd('/') + "/" + imageUrl.TrimStart('/');
                                    }
                                }
                                <div class="ratio ratio-1x1 rounded overflow-hidden border">
                                    <img src="@imageUrl"
                                         class="img-fluid"
                                         style="object-fit: contain; padding: 0.5rem;"
                                         alt="@item.ProductName"
                                         onerror="this.onerror=null; this.src='@backendDefaultImage';" />
                                </div>
                            </div>
                            <div class="col-md-9">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <h5 class="card-title">@item.ProductName</h5>
                                        <button class="btn btn-link text-danger p-0"
                                                onclick="removeFromCart(@item.Id)">
                                            <i class="bi bi-x-lg"></i>
                                        </button>
                                    </div>
                                    <p class="card-text text-primary mb-3">
                                        @string.Format("{0:n0}", item.Price) ₫
                                        <span class="text-muted small">× @item.Quantity</span>
                                        = @string.Format("{0:n0}", (item.Price ?? 0) * item.Quantity) ₫
                                    </p>
                                    <div class="d-flex align-items-center">
                                        <button class="btn btn-outline-secondary btn-sm"
                                                onclick="updateQuantity(@item.Id, @(item.Quantity - 1))"
                                                @(item.Quantity <= 1 ? "disabled" : "")>
                                            <i class="bi bi-dash"></i>
                                        </button>
                                        <span class="mx-3">@item.Quantity</span>
                                        <button class="btn btn-outline-secondary btn-sm"
                                                onclick="updateQuantity(@item.Id, @(item.Quantity + 1))">
                                            <i class="bi bi-plus"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Tổng quan đơn hàng -->
            <div class="col-md-4">
                <div class="card border-0 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title mb-4">Tổng quan đơn hàng</h5>
                        <div class="d-flex justify-content-between mb-3">
                            <span>Tạm tính:</span>
                            <span class="fw-bold">@string.Format("{0:n0}", totalAmount) ₫</span>
                        </div>
                        <div class="d-flex justify-content-between mb-4">
                            <span>Phí vận chuyển:</span>
                            <span class="fw-bold">0 ₫</span>
                        </div>
                        <hr />
                        <div class="d-flex justify-content-between mb-4">
                            <span class="fw-bold">Tổng cộng:</span>
                            <span class="fw-bold text-primary">@string.Format("{0:n0}", totalAmount) ₫</span>
                        </div>
                        <div class="d-grid gap-2">
                            <a href="/Order/Create" class="btn btn-primary">
                                <i class="bi bi-bag-check"></i> Tiến hành đặt hàng
                            </a>
                            <a href="/" class="btn btn-outline-primary">
                                <i class="bi bi-arrow-left"></i> Tiếp tục mua sắm
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <!-- Add Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    
    <script>
        async function updateQuantity(cartId, newQuantity) {
            if (newQuantity < 1) return;

            try {
                const response = await fetch(`/Cart/UpdateQuantity/${cartId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(newQuantity)
                });

                if (response.ok) {
                    location.reload();
                } else {
                    const error = await response.json();
                    alert(error.message || 'Không thể cập nhật số lượng.');
                }
            } catch (error) {
                console.error('Lỗi:', error);
                alert('Đã xảy ra lỗi khi cập nhật số lượng.');
            }
        }

        async function removeFromCart(cartId) {
            if (!confirm('Bạn có chắc muốn xóa sản phẩm này khỏi giỏ hàng?')) {
                return;
            }

            try {
                const response = await fetch(`/Cart/Delete/${cartId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    location.reload();
                } else {
                    const error = await response.json();
                    alert(error.message || 'Không thể xóa sản phẩm.');
                }
            } catch (error) {
                console.error('Lỗi:', error);
                alert('Đã xảy ra lỗi khi xóa sản phẩm.');
            }
        }
    </script>
}